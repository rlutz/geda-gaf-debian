Description: fix ' parentheses around assignment used as truth value' warnings
Author: أحمد المحمودي (Ahmed El-Mahmoudy) <aelmahmoudy@users.sourceforge.net>
Bug: https://bugs.launchpad.net/geda/+bug/1849621
Forwarded: https://bugs.launchpad.net/geda/+bug/1849621/+attachment/5299643/+files/parenthesis-warn-fix.diff
Index: geda-gaf/xorn/tests/storage/copy_attached.c
===================================================================
--- geda-gaf.orig/xorn/tests/storage/copy_attached.c	2019-10-24 03:54:32.210101167 +0200
+++ geda-gaf/xorn/tests/storage/copy_attached.c	2019-10-24 03:54:32.206101150 +0200
@@ -86,15 +86,15 @@
 	assert(xorn_get_objects_attached_to(rev, NULL, &objects, &count) == 0);
 	assert(objects != NULL);
 	assert(count == 3);
-	  assert(net_data = xornsch_get_net_data(rev, objects[0]));
+	  assert((net_data = xornsch_get_net_data(rev, objects[0])));
 	  assert(net_data->color == net0_color);
 	  net0 = objects[0];
 
-	  assert(net_data = xornsch_get_net_data(rev, objects[1]));
+	  assert((net_data = xornsch_get_net_data(rev, objects[1])));
 	  assert(net_data->color == net1_color);
 	  net1 = objects[1];
 
-	  assert(text_data = xornsch_get_text_data(rev, objects[2]));
+	  assert((text_data = xornsch_get_text_data(rev, objects[2])));
 	  assert(text_data->color == text0_color);
 	  text0 = objects[2];
 	free(objects);
@@ -106,7 +106,7 @@
 	assert(xorn_get_objects_attached_to(rev, net1, &objects, &count) == 0);
 	assert(objects != NULL);
 	assert(count == 1);
-	assert(text_data = xornsch_get_text_data(rev, objects[0]));
+	assert((text_data = xornsch_get_text_data(rev, objects[0])));
 	assert(text_data->color == text1_color);
 	text1 = objects[0];
 	free(objects);
@@ -135,19 +135,19 @@
 	xorn_object_t net0, net1, text0, text1, copy;
 	xorn_selection_t sel, copies;
 
-	assert(src = xorn_new_revision(NULL));
+	assert((src = xorn_new_revision(NULL)));
 
 	memset(&net_data, 0, sizeof net_data);
 	net_data.color = 1;
-	assert(net0 = xornsch_add_net(src, &net_data, NULL));
+	assert((net0 = xornsch_add_net(src, &net_data, NULL)));
 	net_data.color = 2;
-	assert(net1 = xornsch_add_net(src, &net_data, NULL));
+	assert((net1 = xornsch_add_net(src, &net_data, NULL)));
 
 	memset(&text_data, 0, sizeof text_data);
 	text_data.color = 3;
-	assert(text0 = xornsch_add_text(src, &text_data, NULL));
+	assert((text0 = xornsch_add_text(src, &text_data, NULL)));
 	text_data.color = 4;
-	assert(text1 = xornsch_add_text(src, &text_data, NULL));
+	assert((text1 = xornsch_add_text(src, &text_data, NULL)));
 
 	assert(xorn_relocate_object(src, text1, net1, NULL, NULL) == 0);
 
@@ -155,36 +155,36 @@
 
 	/* text1 is attached to net1, text0 is not attached */
 
-	assert(dest = xorn_new_revision(NULL));
-	assert(copy = xorn_copy_object(dest, src, net0, NULL));
+	assert((dest = xorn_new_revision(NULL)));
+	assert((copy = xorn_copy_object(dest, src, net0, NULL)));
 	assert_this_net(dest, copy, 1);
 	xorn_free_revision(dest);
 
-	assert(dest = xorn_new_revision(NULL));
-	assert(copy = xorn_copy_object(dest, src, net1, NULL));
+	assert((dest = xorn_new_revision(NULL)));
+	assert((copy = xorn_copy_object(dest, src, net1, NULL)));
 	assert_this_net_with_text(dest, copy, 2, 4);
 	xorn_free_revision(dest);
 
-	assert(dest = xorn_new_revision(NULL));
-	assert(sel = xorn_select_object(net0));
-	assert(copies = xorn_copy_objects(dest, src, sel, NULL));
+	assert((dest = xorn_new_revision(NULL)));
+	assert((sel = xorn_select_object(net0)));
+	assert((copies = xorn_copy_objects(dest, src, sel, NULL)));
 	assert_this_net(dest, get_only_selected_object(dest, copies), 1);
 	xorn_free_selection(copies);
 	xorn_free_selection(sel);
 	xorn_free_revision(dest);
 
-	assert(dest = xorn_new_revision(NULL));
-	assert(sel = xorn_select_object(net1));
-	assert(copies = xorn_copy_objects(dest, src, sel, NULL));
+	assert((dest = xorn_new_revision(NULL)));
+	assert((sel = xorn_select_object(net1)));
+	assert((copies = xorn_copy_objects(dest, src, sel, NULL)));
 	assert_this_net_with_text(
 		dest, get_only_selected_object(dest, copies), 2, 4);
 	xorn_free_selection(copies);
 	xorn_free_selection(sel);
 	xorn_free_revision(dest);
 
-	assert(dest = xorn_new_revision(NULL));
-	assert(sel = xorn_select_attached_to(src, NULL));
-	assert(copies = xorn_copy_objects(dest, src, sel, NULL));
+	assert((dest = xorn_new_revision(NULL)));
+	assert((sel = xorn_select_attached_to(src, NULL)));
+	assert((copies = xorn_copy_objects(dest, src, sel, NULL)));
 	assert_four(dest, copies, 1, 2, 3, 4);
 	xorn_free_selection(copies);
 	xorn_free_selection(sel);
Index: geda-gaf/xorn/tests/storage/get_location.c
===================================================================
--- geda-gaf.orig/xorn/tests/storage/get_location.c	2019-10-24 03:54:32.210101167 +0200
+++ geda-gaf/xorn/tests/storage/get_location.c	2019-10-24 03:54:32.206101150 +0200
@@ -127,14 +127,14 @@
 	struct xornsch_net net_data;
 	struct xornsch_text text_data;
 
-	assert(rev = xorn_new_revision(NULL));
+	assert((rev = xorn_new_revision(NULL)));
 
 	memset(&net_data, 0, sizeof net_data);
-	assert(N = xornsch_add_net(rev, &net_data, NULL));
+	assert((N = xornsch_add_net(rev, &net_data, NULL)));
 
 	memset(&text_data, 0, sizeof text_data);
-	assert(a = xornsch_add_text(rev, &text_data, NULL));
-	assert(b = xornsch_add_text(rev, &text_data, NULL));
+	assert((a = xornsch_add_text(rev, &text_data, NULL)));
+	assert((b = xornsch_add_text(rev, &text_data, NULL)));
 
 	assert_object_location(rev, N, _, 0);
 	assert_object_location(rev, a, _, 1);
Index: geda-gaf/xorn/tests/storage/is_selected.c
===================================================================
--- geda-gaf.orig/xorn/tests/storage/is_selected.c	2019-10-19 08:30:42.690814668 +0200
+++ geda-gaf/xorn/tests/storage/is_selected.c	2019-10-24 03:55:55.618435114 +0200
@@ -26,7 +26,7 @@
 
 	setup(&rev0, &rev1, &rev2, &rev3, &ob0, &ob1a, &ob1b);
 
-	assert(sel = xorn_select_none());
+	assert((sel = xorn_select_none()));
 	assert(xorn_object_is_selected(rev0, sel, ob0) == false);
 	assert(xorn_object_is_selected(rev0, sel, ob1a) == false);
 	assert(xorn_object_is_selected(rev0, sel, ob1b) == false);
@@ -41,7 +41,7 @@
 	assert(xorn_object_is_selected(rev3, sel, ob1b) == false);
 	xorn_free_selection(sel);
 
-	assert(sel = xorn_select_object(ob1a));
+	assert((sel = xorn_select_object(ob1a)));
 	assert(xorn_object_is_selected(rev0, sel, ob0) == false);
 	assert(xorn_object_is_selected(rev0, sel, ob1a) == false);
 	assert(xorn_object_is_selected(rev0, sel, ob1b) == false);
@@ -56,7 +56,7 @@
 	assert(xorn_object_is_selected(rev3, sel, ob1b) == false);
 	xorn_free_selection(sel);
 
-	assert(sel = xorn_select_all(rev3));
+	assert((sel = xorn_select_all(rev3)));
 	assert(xorn_object_is_selected(rev0, sel, ob0) == false);
 	assert(xorn_object_is_selected(rev0, sel, ob1a) == false);
 	assert(xorn_object_is_selected(rev0, sel, ob1b) == false);
Index: geda-gaf/xorn/tests/storage/pointer.c
===================================================================
--- geda-gaf.orig/xorn/tests/storage/pointer.c	2019-10-19 08:30:42.690814668 +0200
+++ geda-gaf/xorn/tests/storage/pointer.c	2019-10-24 04:10:02.941827606 +0200
@@ -39,14 +39,14 @@
 	struct xornsch_picture picture_data;
 	xorn_selection_t sel0, sel1;
 
-	assert(rev = xorn_new_revision(NULL));
+	assert((rev = xorn_new_revision(NULL)));
 
 	memset(&component_data, 0, sizeof component_data);
 	component_data.symbol.ptr = &refcnt0;
 	component_data.symbol.incref = (void (*)(void *))inc;
 	component_data.symbol.decref = (void (*)(void *))dec;
 
-	assert(ob0 = xornsch_add_component(rev, &component_data, NULL));
+	assert((ob0 = xornsch_add_component(rev, &component_data, NULL)));
 	assert(refcnt0 == 1);
 
 	memset(&picture_data, 0, sizeof picture_data);
@@ -54,12 +54,12 @@
 	picture_data.pixmap.incref = (void (*)(void *))inc;
 	picture_data.pixmap.decref = (void (*)(void *))dec;
 
-	assert(ob1 = xornsch_add_picture(rev, &picture_data, NULL));
+	assert((ob1 = xornsch_add_picture(rev, &picture_data, NULL)));
 	assert(refcnt0 == 1);
 	assert(refcnt1 == 1);
 
-	assert(sel0 = xorn_select_all(rev));
-	assert(sel1 = xorn_copy_objects(rev, rev, sel0, NULL));
+	assert((sel0 = xorn_select_all(rev)));
+	assert((sel1 = xorn_copy_objects(rev, rev, sel0, NULL)));
 	assert(refcnt0 != 0);
 	assert(refcnt1 != 0);
 
Index: geda-gaf/xorn/tests/storage/query_attached.c
===================================================================
--- geda-gaf.orig/xorn/tests/storage/query_attached.c	2019-10-19 08:30:42.694814683 +0200
+++ geda-gaf/xorn/tests/storage/query_attached.c	2019-10-24 04:24:23.101271492 +0200
@@ -39,7 +39,7 @@
 	assert(count == 0);
 	free(objects);
 
-	assert(sel = xorn_select_attached_to(rev, attached_to));
+	assert((sel = xorn_select_attached_to(rev, attached_to)));
 	assert(xorn_get_selected_objects(rev, sel, &objects, &count) == 0);
 	assert(count == 0);
 	free(objects);
@@ -66,7 +66,7 @@
 	assert(objects[0] == ob0);
 	free(objects);
 
-	assert(sel = xorn_select_attached_to(rev, attached_to));
+	assert((sel = xorn_select_attached_to(rev, attached_to)));
 	assert(xorn_get_selected_objects(rev, sel, &objects, &count) == 0);
 	assert(objects != NULL);
 	assert(count == 1);
@@ -96,7 +96,7 @@
 	assert(objects[1] == ob1);
 	free(objects);
 
-	assert(sel = xorn_select_attached_to(rev, attached_to));
+	assert((sel = xorn_select_attached_to(rev, attached_to)));
 	assert(xorn_get_selected_objects(rev, sel, &objects, &count) == 0);
 	assert(objects != NULL);
 	assert(count == 2);
@@ -128,7 +128,7 @@
 	assert(objects[2] == ob2);
 	free(objects);
 
-	assert(sel = xorn_select_attached_to(rev, attached_to));
+	assert((sel = xorn_select_attached_to(rev, attached_to)));
 	assert(xorn_get_selected_objects(rev, sel, &objects, &count) == 0);
 	assert(objects != NULL);
 	assert(count == 3);
@@ -162,14 +162,14 @@
 	struct xornsch_text text_data;
 	xorn_object_t N, a, b;
 
-	assert(rev = xorn_new_revision(NULL));
+	assert((rev = xorn_new_revision(NULL)));
 
 	memset(&net_data, 0, sizeof net_data);
-	assert(N = xornsch_add_net(rev, &net_data, NULL));
+	assert((N = xornsch_add_net(rev, &net_data, NULL)));
 
 	memset(&text_data, 0, sizeof text_data);
-	assert(a = xornsch_add_text(rev, &text_data, NULL));
-	assert(b = xornsch_add_text(rev, &text_data, NULL));
+	assert((a = xornsch_add_text(rev, &text_data, NULL)));
+	assert((b = xornsch_add_text(rev, &text_data, NULL)));
 
 	assert_attached_objects_3(rev, _, N, a, b);
 	assert_attached_objects_0(rev, N);
Index: geda-gaf/xorn/tests/storage/reloc_attach.c
===================================================================
--- geda-gaf.orig/xorn/tests/storage/reloc_attach.c	2019-10-19 08:30:42.694814683 +0200
+++ geda-gaf/xorn/tests/storage/reloc_attach.c	2019-10-24 09:43:43.213984280 +0200
@@ -140,7 +140,7 @@
 	xorn_object_t *objects;
 	size_t count;
 
-	assert(r = xorn_new_revision(rev));
+	assert((r = xorn_new_revision(rev)));
 	assert(xorn_delete_object(r, del, NULL) == 0);
 
 	assert(xorn_get_objects(r, &objects, &count) == 0);
@@ -157,7 +157,7 @@
 	xorn_object_t *objects;
 	size_t count;
 
-	assert(r = xorn_new_revision(rev));
+	assert((r = xorn_new_revision(rev)));
 	assert(xorn_delete_object(r, del, NULL) == 0);
 
 	assert(xorn_get_objects(r, &objects, &count) == 0);
@@ -176,7 +176,7 @@
 	xorn_object_t *objects;
 	size_t count;
 
-	assert(r = xorn_new_revision(rev));
+	assert((r = xorn_new_revision(rev)));
 	assert(xorn_delete_object(r, del, NULL) == 0);
 
 	assert(xorn_get_objects(r, &objects, &count) == 0);
@@ -339,14 +339,14 @@
 	struct xornsch_line line_data;
 	struct xornsch_component component_data;
 
-	assert(rev = xorn_new_revision(NULL));
+	assert((rev = xorn_new_revision(NULL)));
 
 	memset(&net_data, 0, sizeof net_data);
-	assert(N = xornsch_add_net(rev, &net_data, NULL));
+	assert((N = xornsch_add_net(rev, &net_data, NULL)));
 
 	memset(&text_data, 0, sizeof text_data);
-	assert(a = xornsch_add_text(rev, &text_data, NULL));
-	assert(b = xornsch_add_text(rev, &text_data, NULL));
+	assert((a = xornsch_add_text(rev, &text_data, NULL)));
+	assert((b = xornsch_add_text(rev, &text_data, NULL)));
 
 	common_checks(rev, N, a, b, N, a, b, false, E_PNOTSIB);
 
@@ -417,7 +417,7 @@
 	check(rev, b, _, a, E_NOTRANS, N, a, b);
 	check(rev, b, N, _, E_NOTRANS, N, a, b);
 
-	assert(rev1 = xorn_new_revision(rev));
+	assert((rev1 = xorn_new_revision(rev)));
 
 	/* can't attach text to line */
 
Index: geda-gaf/xorn/tests/storage/set_obdata.c
===================================================================
--- geda-gaf.orig/xorn/tests/storage/set_obdata.c	2019-10-19 08:30:42.694814683 +0200
+++ geda-gaf/xorn/tests/storage/set_obdata.c	2019-10-24 09:44:03.958067336 +0200
@@ -86,9 +86,9 @@
 	memset(&component_data, 0, sizeof component_data);
 	memset(&text_data, 0, sizeof text_data);
 
-	assert(rev = xorn_new_revision(NULL));
-	assert(ob0 = xornsch_add_line(rev, &line_data, NULL));
-	assert(ob1 = xornsch_add_line(rev, &line_data, NULL));
+	assert((rev = xorn_new_revision(NULL)));
+	assert((ob0 = xornsch_add_line(rev, &line_data, NULL)));
+	assert((ob1 = xornsch_add_line(rev, &line_data, NULL)));
 
 	assert(xornsch_set_net_data(rev, ob0, &net_data, NULL) == 0);
 	assert(xornsch_set_text_data(rev, ob1, &text_data, NULL) == 0);
