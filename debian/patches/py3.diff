Description: migrate to Python 3
Author: أحمد المحمودي (Ahmed El-Mahmoudy) <aelmahmoudy@users.sourceforge.net>
Bug-Debian: https://bugs.debian.org/936593
Bug: https://bugs.launchpad.net/geda/+bug/1842509
Forwarded: https://bugs.launchpad.net/geda/+bug/1842509/+attachment/5286567/+files/py3.diff
Index: geda-gaf/utils/scripts/garchive.py
===================================================================
--- geda-gaf.orig/utils/scripts/garchive.py	2019-10-19 05:53:52.785139518 +0200
+++ geda-gaf/utils/scripts/garchive.py	2019-10-19 05:54:53.677383318 +0200
@@ -89,7 +89,7 @@
             suffix due to popular demand.
 """
 ############################################################################
-import sys, copy, string, getopt, re, os, commands
+import sys, copy, string, getopt, re, os, subprocess
 
 ############################################################################
 #  Helper fcns and data structures.                                        #
@@ -138,7 +138,7 @@
     This prints out String when the -v flag is set, otherwise is silent
     """
     if (Args.VerboseMode == "verbose"):
-        print("---- "+ String)
+        print(("---- "+ String))
     return
 
 #---------------------------------------------------------------------------
@@ -182,7 +182,7 @@
             try:
                 EnvVar = os.environ[EnvVar]
             except KeyError:
-                print ("Env variable "+EnvVar+" not defined in current environment")
+                print(("Env variable "+EnvVar+" not defined in current environment"))
                 print ("Try setting it. . . .")
                 sys.exit(1)
 
@@ -250,7 +250,7 @@
         try:
             OptList, Args = getopt.getopt(sys.argv[1:], 'aef:ho:v', ["help"])
         except getopt.error:
-            print Usage                # print out usage string if
+            print(Usage)                # print out usage string if
                                        # user uses invalid flag.
             sys.exit(1)
 
@@ -267,7 +267,7 @@
                 self.VerboseMode = "verbose"
                             
             if Option in ('-h', '--help'):
-                print Usage
+                print(Usage)
                 sys.exit(0)
                 
         # Second pass.  Do sanity checking and get configured filenames.
@@ -287,7 +287,7 @@
                 try:
                     os.stat(Value)
                 except OSError:
-                    print("Resource file "+Value+" doesn't exist.  Exiting.")
+                    print(("Resource file "+Value+" doesn't exist.  Exiting."))
                     sys.exit(1)
                 else:
                     self.GarchiveRcFileName = Value                #strcopy?
@@ -300,7 +300,7 @@
                 else:
                     print("Warning -- output file suffix is not \".tar.gz\" -- the")
                     print("extractor won't know how to deal with your archive.")
-                    Input = raw_input("Continue? [y/N] ")
+                    Input = input("Continue? [y/N] ")
                     if ( (len(Input) == 0) or (Input[0] != "y") ):
                         sys.exit(1)
                     else:
@@ -332,7 +332,7 @@
     try:
         SysFile = open(SystemRCFileName, "r")
     except:
-        print("Unable to find system resource file "+SystemRCFileName+".")
+        print(("Unable to find system resource file "+SystemRCFileName+"."))
         sys.exit(1)
 
     for line in SysFile.readlines():
@@ -364,11 +364,11 @@
     try:
         LocalFile = open(LocalRCFileName, "r")
     except:
-        Input = raw_input(LocalRCFileName+" doesn't exist.  Create empty version in local dir? [Y/n] ")
+        Input = input(LocalRCFileName+" doesn't exist.  Create empty version in local dir? [Y/n] ")
         if ( (len(Input) == 0) or (Input[0] != "n") ):
             os.system("touch "+LocalRCFileName)
         else:
-            print("You need "+LocalRCFileName+" to create archive.  Aborting.")
+            print(("You need "+LocalRCFileName+" to create archive.  Aborting."))
             sys.exit(1)
 
     for line in LocalFile.readlines():
@@ -409,13 +409,13 @@
             FileName = NormalizePath(Args.UserDir, FileName)    # Just make sure filename is kosher. . . .
             ArchFileList.append(FileName)
         else:
-            Input = raw_input(FileName+" doesn't exist.  Create empty version in local dir? [Y/n] ")
+            Input = input(FileName+" doesn't exist.  Create empty version in local dir? [Y/n] ")
             if ( (len(Input) == 0) or (Input[0] != "n") ):
-                print("Creating "+FileName+" in archive.")
+                print(("Creating "+FileName+" in archive."))
                 os.system("touch "+FileName)
                 ArchFileList.append(FileName)
             else:
-                print("You need "+FileName+" to create archive.  Aborting.")
+                print(("You need "+FileName+" to create archive.  Aborting."))
                 sys.exit(1)
 
     #  Add the gschem-files dir /tmp/gschem-files
@@ -433,7 +433,7 @@
         try:
             os.stat(File)
         except OSError:
-            print("File "+File+" listed in command line doesn't exist.  Ignoring. . .")
+            print(("File "+File+" listed in command line doesn't exist.  Ignoring. . ."))
             continue
         else:
             ArchFileList.append(File)
@@ -453,7 +453,7 @@
         try:
             os.stat(FileName)
         except OSError:
-            print("File "+FileName+" listed in "+Args.GarchiveRcFileName+" doesn't exist.  Ignoring. . .")
+            print(("File "+FileName+" listed in "+Args.GarchiveRcFileName+" doesn't exist.  Ignoring. . ."))
             continue
         else:
             FileName = NormalizePath(Args.UserDir, FileName)
@@ -483,7 +483,7 @@
             try:
                 TestFile = open(File, "r")
             except IOError:
-                print("Can't access "+File+" for reading.  Exiting . . . .")
+                print(("Can't access "+File+" for reading.  Exiting . . . ."))
                 sys.exit(1)
             TestFile.close()
 
@@ -699,7 +699,7 @@
     try:
         TestFile = open(Args.ScratchDir+"/gschem_test", "w")
     except IOError:
-        print("Can't work in "+Args.ScratchDir+" directory.  Check that you have write permission there.")
+        print(("Can't work in "+Args.ScratchDir+" directory.  Check that you have write permission there."))
         sys.exit(1)
     else:
         TestFile.close()
@@ -795,14 +795,14 @@
     except OSError:                   #  archive is not in user directory yet, no need to force it.
         os.system("mv "+Args.OutputFileName+" "+Args.UserDir)
     else:                          # Directory already exists
-        Input = raw_input(Args.UserDir+"/"+Args.OutputFileName+" already exists.  Overwrite? [y/N] ")
+        Input = input(Args.UserDir+"/"+Args.OutputFileName+" already exists.  Overwrite? [y/N] ")
         if ( (len(Input) == 0) or (Input[0] != "y") ):
             print("Preserving existing archive in local directory.")
-            print("Your new archive lives in "+Args.ScratchDir+"/"+Args.OutputFileName)
+            print(("Your new archive lives in "+Args.ScratchDir+"/"+Args.OutputFileName))
         else:
             os.system("rm -fR "+Args.UserDir+"/"+Args.OutputFileName)   # Remove old archive
             os.system("mv "+Args.OutputFileName+" "+Args.UserDir)
-            print("gEDA archive "+Args.UserDir+"/"+Args.OutputFileName+" created successfully!")
+            print(("gEDA archive "+Args.UserDir+"/"+Args.OutputFileName+" created successfully!"))
 
     #  Clean up remaining mess
     os.system("rm -fR "+ArchiveString)
@@ -833,13 +833,13 @@
         try:
             os.stat(FileName)
         except OSError:
-            print("File "+FileName+" doesn't exist.  Ignoring")
+            print(("File "+FileName+" doesn't exist.  Ignoring"))
             continue
 
         try:
             os.system("cp -f "+FileName+" "+Args.ScratchDir)
         except IOError:
-            print("Can't work in the "+Args.ScratchDir+" directory.  Check that you have write permisison there.")
+            print(("Can't work in the "+Args.ScratchDir+" directory.  Check that you have write permisison there."))
             sys.exit(1)
             
         os.chdir(Args.ScratchDir)
@@ -859,7 +859,7 @@
         NewFileName = re.sub('\.gz', '', FileName)
 
         # Get list of files in archive.  Then open up archive
-        ReturnString = commands.getoutput("tar -t -f "+NewFileName)
+        ReturnString = subprocess.getoutput("tar -t -f "+NewFileName)
         FileList = re.split('\s+', ReturnString)
 
         for File in FileList:
@@ -875,9 +875,9 @@
                 except OSError:
                     os.system("mv "+File+" "+Args.UserDir)
                 else:
-                    Input = raw_input(Args.UserDir+"/"+File+" already exists.  Overwrite? [yN] ")
+                    Input = input(Args.UserDir+"/"+File+" already exists.  Overwrite? [yN] ")
                     if ( (len(Input) == 0) or (Input[0] != "y") ):
-                        print("Preserving existing "+File+" in local directory.")
+                        print(("Preserving existing "+File+" in local directory."))
                     else:
                         os.system("rm -fR "+Args.UserDir+"/"+File)
                         os.system("mv -f "+File+" "+Args.UserDir)
Index: geda-gaf/utils/scripts/tragesym
===================================================================
--- geda-gaf.orig/utils/scripts/tragesym	2019-10-19 05:53:52.785139518 +0200
+++ geda-gaf/utils/scripts/tragesym	2019-10-19 05:53:52.785139518 +0200
@@ -96,29 +96,29 @@
     def check(self):
     	if self.style=="spacer":
 	    if self.pos == "":
-		print "Error: there must be a position with a spacer.\n"
+		print("Error: there must be a position with a spacer.\n")
 		sys.exit()
 	    if self.pos not in poslist:
-		print "Error: position is not allowed: \n", self
+		print("Error: position is not allowed: \n", self)
 		sys.exit()
             return
         if self.style != "none":
             if self.seq.isdigit():
                 string.atoi(self.seq)
             else:
-                print "pinseq needs to be a number: \n", self
+                print("pinseq needs to be a number: \n", self)
                 sys.exit()
         if self.type not in typelist:
-            print "Pintype not allowed: \n", self
+            print("Pintype not allowed: \n", self)
             sys.exit()
         if self.style not in stylelist:
-            print "Style is not allowed: \n", self
+            print("Style is not allowed: \n", self)
             sys.exit()
         if self.pos not in poslist:
-            print "Position is not allowed: \n", self
+            print("Position is not allowed: \n", self)
             sys.exit()
         if self.pos == "" and self.net == "":
-            print "There must be either position or a netlabel: \n", self
+            print("There must be either position or a netlabel: \n", self)
             sys.exit()
         
         
@@ -126,9 +126,9 @@
 
 def usage():
     '''Print a usage message.'''
-    print "tragesym version " + VERSION
-    print "(C) 2001,2002,2003,2004,2006,2007 by Werner Hoch <werner.ho@gmx.de>"
-    print "Usage is: ", sys.argv[0] ,"<infile> <outfile>"
+    print("tragesym version " + VERSION)
+    print("(C) 2001,2002,2003,2004,2006,2007 by Werner Hoch <werner.ho@gmx.de>")
+    print("Usage is: ", sys.argv[0] ,"<infile> <outfile>")
 
 
 def parselabel(str):
@@ -149,9 +149,9 @@
             slash = 0
             
     if slash == 1 or neg == 1:
-        print '''unbalanced overbars or escapesequence: ''', str
-        print '''the overbar starts and ends with "\_" example: \"\_enable\_'''
-        print '''to write a "\" use "\\"'''
+        print('''unbalanced overbars or escapesequence: ''', str)
+        print('''the overbar starts and ends with "\_" example: \"\_enable\_''')
+        print('''to write a "\" use "\\"''')
         sys.exit()
     return textout
 
@@ -204,11 +204,11 @@
         elif section=="geda_attr":
             element=split_tab_equal(line,1)
             if len(element) < 2 or len(element[1].strip()) == 0:
-                print 'Warning: Empty attribute "%s" in the geda_attr section' % element[0]
-                print '         The incomplete attribute will be dropped'
+                print('Warning: Empty attribute "%s" in the geda_attr section' % element[0])
+                print('         The incomplete attribute will be dropped')
             else:
                 nr=1
-                while geda_attr.has_key((element[0],nr)):
+                while (element[0],nr) in geda_attr:
                     nr=nr+1
                 geda_attr[(string.strip(element[0]),nr)]=string.strip(element[1])
         elif section=="pins":
@@ -216,7 +216,7 @@
             if len(element) > 2:
                 pins.append(Pin(element))
         else:
-            print linenr, ": illegal section name: ", section
+            print(linenr, ": illegal section name: ", section)
             sys.exit()
     return options, geda_attr, pins
 
@@ -306,7 +306,7 @@
                               calculated_top_symwidth)
 
     if (numptop + numpbottom > 0):
-	print "Note: use sym_width to adjust symbol width if texts overlap."
+	print("Note: use sym_width to adjust symbol width if texts overlap.")
 
     if o_symwidth == 0:
 	o_symwidth = calculated_symwidth
@@ -334,17 +334,17 @@
     f = open(filename, "w")
 
 ### Draw the symbol version
-    if attr.has_key(("version",1)):
+    if ("version",1) in attr:
         value=attr[("version",1)]
         if re.match("[0-9]{8}$", value):
             f.write("v " + value + " 1\n")
         elif re.match("[0-9]{8} 1$", value):
             f.write("v " + value + "\n")
         else:
-            print "error: version string format invalid: [%s]" % value
+            print("error: version string format invalid: [%s]" % value)
             sys.exit()
     else:
-        print "error: version attribut missing"
+        print("error: version attribut missing")
         sys.exit()
    
     if o_sort == "yes":
@@ -355,7 +355,7 @@
             continue
         if pin.style=="spacer":
             if o_sort == "yes":
-                print "Warning: spacers are not supported when sorting labels"
+                print("Warning: spacers are not supported when sorting labels")
                 continue
             elif pin.pos == "l": #left pin
                 plefty=plefty - o_vdist  #where to draw the _next_ pin
@@ -497,30 +497,30 @@
  	texty += 100
     
     ## special attribute format
-    if attr.has_key(("refdes",1)):
+    if ("refdes",1) in attr:
         f.write("T %i"% urefx +" %i"% urefy +" 8 10 1 1 0 6 1\n")
         f.write("refdes=" + attr[("refdes",1)] + "\n")
     else:
-        print "Warning: refdes attribut missing"
+        print("Warning: refdes attribut missing")
 
-    if attr.has_key(("name",1)):
+    if ("name",1) in attr:
         f.write("T %i" %namex + " %i"% namey + " 9 10 1 0 0 0 1\n")
         f.write(attr[("name",1)] + "\n")
     else:
-        print "Warning: name attribut missing"
+        print("Warning: name attribut missing")
 
     ## attributes with same format and warnings
     for a in single_attr_warning:
-        if attr.has_key((a,1)):
+        if (a,1) in attr:
             f.write("T %i" %textx + " %i"% texty + " 5 10 0 0 0 0 1\n")
             f.write(a + "=" + attr[(a,1)] + "\n")
             texty=texty+200
         else:
-            print "Warning: " + a + " attribut missing"
+            print("Warning: " + a + " attribut missing")
 
     ## attributes without warning
     for a in single_attr:
-        if attr.has_key((a,1)):
+        if (a,1) in attr:
             f.write("T %i" %textx + " %i"% texty + " 5 10 0 0 0 0 1\n")
             f.write(a + "=" + attr[(a,1)] + "\n")
             texty=texty+200
@@ -528,28 +528,28 @@
     ## attributes with more than one equal name
     for a in multiple_attr:
         i = 1
-        while attr.has_key((a,i)):
+        while (a,i) in attr:
             f.write("T %i" %textx + " %i"% texty + " 5 10 0 0 0 0 1\n")
             f.write(a + "=" + attr[(a,i)] + "\n")
             texty=texty+200
             i = i + 1
 
     ## unknown attributes
-    for (name, number),value in attr.items():
+    for (name, number),value in list(attr.items()):
         if name not in official_attr:
             f.write("T %i" %textx + " %i"% texty + " 5 10 0 0 0 0 1\n")
             f.write(name + "=" + value + "\n")
             texty=texty+200
-            print 'Warning: The attribute "%s=%s" is not official' %(name, value)
+            print('Warning: The attribute "%s=%s" is not official' %(name, value))
 
     nets={}
     for pin in pins:
         if pin.style == "none":
-            if not nets.has_key(pin.net):
+            if pin.net not in nets:
                 nets[pin.net] = pin.nr
             else:
                 nets[pin.net] = nets[pin.net] + ","+ pin.nr
-    for key,value in nets.items():
+    for key,value in list(nets.items()):
         f.write("T %i" %textx + " %i"% texty + " 5 10 0 0 0 0 1\n")
         f.write("net=" + key + ":" + value + "\n")
         texty=texty+200
@@ -558,17 +558,17 @@
 
 def mergeoptions(source_opt,pre_opt):
     ret=pre_opt
-    for item in source_opt.keys():
-        if ret.has_key(item):
+    for item in list(source_opt.keys()):
+        if item in ret:
             ret[item]=source_opt[item]
         else:
-            print "This option is not allowed:", item
+            print("This option is not allowed:", item)
             sys.exit()
     return ret
 
 def generate_pinseq(pins):
     seq=1
-    for nr in xrange(len(pins)):
+    for nr in range(len(pins)):
         if pins[nr].style not in ["none","spacer"]:
             pins[nr].seq = "%i"%seq
             seq = seq + 1
@@ -597,7 +597,7 @@
 file_in=args[0]
 file_out=args[1]
 if not os.path.exists(file_in):
-    print "Input file " + file_in + " not found."
+    print("Input file " + file_in + " not found.")
     sys.exit()
 
 ## read sourcefile
